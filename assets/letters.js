// letters.js â€” cartas (edite os textos aqui)
const cartaAniversario = `Oieee! Feliz aniversÃ¡rio, gatona!

Espero que tenha um dia excelente, queria que fosse comigo, mas nÃ£o sei se vai dar :(, mas tudo bem (nÃ£o estÃ¡).

Eu te desejo toda a felicidade desse mundo, sÃ©rio, vocÃª Ã© muito especial e importante pra mim! VocÃª me fez evoluir/melhorar muito como ser humano, como amigo, ~~como namorado~~.

Espero que consiga realizar todos os seus sonhos, que seu futuro seja mais brilhante do que a maior estrela que vocÃª jÃ¡ viu â€” sem contar vocÃª mesma nÃ©, pois seu brilho Ã© incomparÃ¡vel.

Lembro como se fosse ontem, nossas primeiras mensagens, a primeira call... vocÃª me apelidando de 'teacher'.. vocÃª tentou me irritar, mas nÃ£o consigo descrever o carinho que recebi com esse apelido, na verdade, tudo que vem de vocÃª me transmite afeto, carinho e amor.. atÃ© em momentos mais sensÃ­veis ou tensos, nunca passou pela minha cabeÃ§a que vocÃª deixou de me amar, e eu tambÃ©m nunca deixei e nem vou deixar de te amar, mas prefiro falar diretamente: <span class="big-love">EU TE AMO!</span>

Eu amo seu jeitinho, amo o jeito que vocÃª me trata, amo como vocÃª Ã© com a sua mamis â€” se eu falasse amigos estaria mentindoKKKKK, amo seus gestos de amor e carinho, amo quando vocÃª cuida de mim, quando estou triste/ansioso, amo quando me anima em uma tiltada de joguinho online (eu fico insuportÃ¡vel, eu sei), amo sua voz (rs), amo seu carioquÃªs, amo seus olhos, cada feiÃ§Ã£o do seu rosto, meu sonho Ã© um dia ter o privilÃ©gio de olhar para vocÃª, frente a frente, para continuar me apaixonando mais e mais por vocÃª, atÃ© chegar no infinito, ou seja, nunca vou parar.

VocÃª Ã© maravilhosa em todos os aspectos, de verdade mesmo, do fundo do meu coraÃ§Ã£o. E mais uma vez, eu te amo. Tenho infinidade de coisas para falar, mas essas sÃ£o as que vieram na minha cabeÃ§a agora, beijinhos!

**You're perfect, you're the best, I love you, dear. ğŸ’œ**`;

// Carta de saudade formatada
const cartaSaudade = `Ei, meu amor...

Se vocÃª estÃ¡ lendo isso agora, Ã© porque a saudade resolveu aparecer.

EntÃ£o, primeiro de tudo: respira fundo e lembra que eu estou pensando em vocÃª nesse exato momento, nÃ£o importa onde eu esteja.

A saudade pode ser difÃ­cil Ã s vezes, mas ela tambÃ©m Ã© a prova mais bonita de que o que temos Ã© real e vale a pena. Ela sÃ³ existe porque vocÃª significa muito para mim â€” e eu para vocÃª.

Fecha os olhos e lembra da minha voz, te chamando de amor, de bobona, te dando carinho ou fazendo piadinhas sem graÃ§a. Tudo isso continua aqui, guardado, esperando para se repetir de novo.

Logo estaremos juntinhos, falando besteira, rindo Ã  toa e se divertindo muito, eu tenho certeza!

AtÃ© lÃ¡â€¦ aguente firme.

**Because every beat of my heart continues to say your name. Always. ğŸ’œ**`;

// FunÃ§Ã£o para processar texto riscado e destacar inglÃªs
function processStrikethrough(text) {
  // Normalizar e remover BOM / espaÃ§os iniciais gerais
  let normalized = String(text || '').replace(/\uFEFF/g, '').replace(/\r\n/g, '\n');

  // Dividir por parÃ¡grafos (duas quebras de linha ou mais separam parÃ¡grafos)
  const paragraphs = normalized
    .split(/\n\s*\n+/)
    .map(p => p.trim())   // remover espaÃ§os em cada parÃ¡grafo
    .filter(p => p.length > 0);

  // funÃ§Ã£o auxiliar para aplicar substituiÃ§Ãµes em cada parÃ¡grafo
  function transformParagraph(p) {
    // substituir texto riscado ~~...~~
    p = p.replace(/~~(.*?)~~/g, '<span class="strike">$1</span>');
    // substituir destaque em inglÃªs **...**
    p = p.replace(/\*\*(.*?)\*\*/g, '<span class="highlighted-phrase strong-highlight">$1</span>');
    // transformar coraÃ§Ã£o em span
    p = p.replace(/ğŸ’œ/g, '<span class="heart-emoji">ğŸ’œ</span>');
    // preservar spans jÃ¡ inseridos (como .big-love) sem alteraÃ§Ã£o adicional

    return p;
  }

  // Aplicar transformaÃ§Ãµes e mapear para <p> com classes
  const htmlParts = paragraphs.map(p => {
    const transformed = transformParagraph(p);

    // Se o parÃ¡grafo contÃ©m exatamente o marcador big-love (ou sÃ³ "EU TE AMO!")
    // tornar um bloco visual special
    if (/EU TE AMO/i.test(transformed) && /big-love/i.test(transformed)) {
      // garantir que a tag .big-love esteja em um wrapper prÃ³prio
      return `<div class="big-love-block">${transformed}</div>`;
    }

    // Se o parÃ¡grafo Ã© apenas a linha em inglÃªs destacada (weaker detection),
    // aplicar um wrapper que dÃ¡ maior destaque visual
    if (/^\*\*.*\*\*$/.test(p) || /You\'re perfect|Because every beat of my heart/i.test(p)) {
      return `<p class="final-english">${transformed}</p>`;
    }

    return `<p>${transformed}</p>`;
  });

  return htmlParts.join('');
}

// FunÃ§Ã£o para criar carta simples com funcionalidade de abrir
function createSimpleLetter(containerId, content, title) {
  const container = document.getElementById(containerId);
  if (!container) return;
  
  // Limpar container
  container.innerHTML = '';
  
  // Criar carta simples
  const letterCard = document.createElement('div');
  letterCard.className = 'simple-letter';
  letterCard.innerHTML = `
    <div class="letter-header">
      <h3>${title}</h3>
    </div>
    <div class="envelope-button-container">
      <button class="envelope-btn">ğŸ’Œ</button>
      <p class="envelope-hint">Clique para abrir</p>
    </div>
  `;
  
  // Adicionar evento para expandir
  const envelopeBtn = letterCard.querySelector('.envelope-btn');
  envelopeBtn.addEventListener('click', () => {
    showLetterZoom(title, content);
  });
  
  container.appendChild(letterCard);
}

// FunÃ§Ã£o para mostrar zoom da carta (similar aos presentinhos)
function showLetterZoom(title, content) {
  // Iniciar mÃºsica ao abrir carta
  if (window.startMusicForLetter) {
    window.startMusicForLetter();
  }
  
  // Criar modal de zoom
  const zoomModal = document.createElement('div');
  zoomModal.className = 'letter-zoom-modal';
  zoomModal.innerHTML = `
    <div class="zoom-content">
      <div class="zoom-header">
        <h2>${title}</h2>
        <button class="close-zoom-btn">âœ•</button>
      </div>
      <div class="zoom-body love-letter">
        <div class="letter-full-text">
          ${processStrikethrough(content)}
        </div>
      </div>
    </div>
  `;
  
  // Adicionar ao body
  document.body.appendChild(zoomModal);
  
  // Mostrar modal
  setTimeout(() => {
    zoomModal.classList.add('show');
  }, 10);
  
  // Event listeners
  const closeBtn = zoomModal.querySelector('.close-zoom-btn');
  closeBtn.addEventListener('click', () => {
    // Parar mÃºsica ao fechar carta
    if (window.stopMusicForLetter) {
      window.stopMusicForLetter();
    }
    
    zoomModal.classList.remove('show');
    setTimeout(() => {
      document.body.removeChild(zoomModal);
    }, 300);
  });
  
  // Fechar clicando fora
  zoomModal.addEventListener('click', (e) => {
    if (e.target === zoomModal) {
      // Parar mÃºsica ao fechar carta
      if (window.stopMusicForLetter) {
        window.stopMusicForLetter();
      }
      
      closeBtn.click();
    }
  });
}

// Garantir funÃ§Ãµes globais de controle de Ã¡udio apenas se nÃ£o existirem
if (!window.startMusicForLetter) {
  // Tenta tocar um Ã¡udio dedicado Ã  carta (se existir) sem sobrescrever sons de outros componentes.
  window.startMusicForLetter = function() {
    try {
      // Se jÃ¡ houver um gerenciador prÃ³prio, reutiliza
      if (window._letterAudio && !window._letterAudio.paused) return;

      // Procurar por um elemento de Ã¡udio com atributo data-letter-audio
      let audio = document.querySelector('audio[data-letter-audio]');
      if (!audio) {
        // tentar por id padrÃ£o
        audio = document.getElementById('letterAudio');
      }
      if (audio) {
        window._letterAudio = audio;
        audio.play().catch(() => { /* autoplay bloqueado */ });
      }
      // se nÃ£o existir, nÃ£o criaremos arquivo novo aqui (para nÃ£o quebrar comportamento)
    } catch (e) {
      console.warn('startMusicForLetter erro:', e);
    }
  };
}

if (!window.stopMusicForLetter) {
  window.stopMusicForLetter = function() {
    try {
      if (window._letterAudio) {
        window._letterAudio.pause();
        window._letterAudio.currentTime = 0;
      }
      // tambÃ©m garantir que qualquer Ã¡udio identificado com data-letter-audio seja parado
      const audios = document.querySelectorAll('audio[data-letter-audio]');
      audios.forEach(a => {
        a.pause();
        a.currentTime = 0;
      });
    } catch (e) {
      console.warn('stopMusicForLetter erro:', e);
    }
  };
}

// Definir stopAllCustomAudio se nÃ£o existir â€” gifts.js chama isso.
// Isso garante que, ao fechar presentes, todos os players sejam realmente pausados.
if (!window.stopAllCustomAudio) {
  window.stopAllCustomAudio = function() {
    try {
      // Pausar todos os <audio> na pÃ¡gina
      const allAudios = document.querySelectorAll('audio');
      allAudios.forEach(a => {
        try {
          a.pause();
          a.currentTime = 0;
        } catch(e) {}
      });

      // Parar Ã¡udio da carta se houver
      if (window.stopMusicForLetter) {
        try { window.stopMusicForLetter(); } catch(e) {}
      }

      // Parar player customizado do main.js se existir
      if (window.activeCustomAudio) {
        try {
          window.activeCustomAudio.pause();
          window.activeCustomAudio.currentTime = 0;
          window.activeCustomAudio = null;
        } catch(e) {}
      }
    } catch (e) {
      console.warn('stopAllCustomAudio erro:', e);
    }
  };
}

// Aplicar cartas simples
document.addEventListener('DOMContentLoaded', function() {
  createSimpleLetter('cartaAniversario', cartaAniversario, 'Feliz AniversÃ¡rio ğŸ’œ');
  createSimpleLetter('cartaSaudade', cartaSaudade, 'ğŸ’œ');
});

// Garantir que, quando o modal de presente for fechado, a mÃºsica da carta seja parada.
// Isso evita que o Ã¡udio volte a tocar ao fechar um presente depois de fechar uma carta.
document.addEventListener('DOMContentLoaded', () => {
  const giftModal = document.getElementById('giftModal');
  if (giftModal) {
    // observer para quando o modal perder a classe 'show' -> parar Ã¡udio da carta
    const observer = new MutationObserver(mutations => {
      mutations.forEach(m => {
        if (m.attributeName === 'class') {
          if (!giftModal.classList.contains('show')) {
            try { window.stopMusicForLetter && window.stopMusicForLetter(); } catch(e) { /* silencioso */ }
            try { window.stopAllCustomAudio && window.stopAllCustomAudio(); } catch(e) {}
          }
        }
      });
    });
    observer.observe(giftModal, { attributes: true, attributeFilter: ['class'] });

    // tambÃ©m interceptar o botÃ£o de fechar (caso haja) para garantir parada imediata
    const closeButtons = giftModal.querySelectorAll('button, .close');
    closeButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        try { window.stopMusicForLetter && window.stopMusicForLetter(); } catch(e) {}
        try { window.stopAllCustomAudio && window.stopAllCustomAudio(); } catch(e) {}
      });
    });
  }
});

